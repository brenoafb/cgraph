!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
%.o	Makefile	/^%.o: %.c $(DEPS)$/;"	t
BACK	search.h	/^#define BACK /;"	d
CC	Makefile	/^CC=clang$/;"	m
CFLAGS	Makefile	/^CFLAGS= -Wall -Wextra -g$/;"	m
CROSS	search.h	/^#define CROSS /;"	d
DEPS	Makefile	/^DEPS = graph.h stack.h queue.h search.h path.h$/;"	m
FORWARD	search.h	/^#define FORWARD /;"	d
MAINSRC	Makefile	/^MAINSRC = main.c$/;"	m
MAXQ	queue.h	/^#define MAXQ /;"	d
MAXS	stack.h	/^#define MAXS /;"	d
MAXV	graph.h	/^#define MAXV /;"	d
NIL	path.h	/^#define NIL /;"	d
NIL	search.h	/^#define NIL /;"	d
OBJ	Makefile	/^OBJ = graph.o stack.o queue.o search.o path.o$/;"	m
TREE	search.h	/^#define TREE /;"	d
a	queue.h	/^  int a[MAXQ];$/;"	m	struct:queue	typeref:typename:int[]
a	stack.h	/^  int a[MAXS];$/;"	m	struct:stack	typeref:typename:int[]
bfs	search.c	/^void bfs(graph *g, search_data *data, int start) {$/;"	f	typeref:typename:void
cgraph	README.md	/^# cgraph$/;"	c
clean	Makefile	/^clean:$/;"	t
d	plot.py	/^d = open_dict("g.txt")$/;"	v
data	main.c	/^search_data data;$/;"	v	typeref:typename:search_data
degrees	graph.h	/^  int degrees[MAXV];$/;"	m	struct:graph	typeref:typename:int[]
deinit_graph	graph.c	/^void deinit_graph(graph *g) {$/;"	f	typeref:typename:void
deinit_list	graph.c	/^void deinit_list(edgenode *e) {$/;"	f	typeref:typename:void
dequeue	queue.c	/^int dequeue(queue *q) {$/;"	f	typeref:typename:int
dfs	search.c	/^void dfs(graph *g, search_data *data, int v) {$/;"	f	typeref:typename:void
dijkstra	path.c	/^void dijkstra(graph *g, int start, path_data *data) {$/;"	f	typeref:typename:void
directed	graph.h	/^  bool directed;$/;"	m	struct:graph	typeref:typename:bool
discovered	search.h	/^  bool discovered[MAXV];$/;"	m	struct:search_data	typeref:typename:bool[]
distance	path.h	/^  int distance[MAXV];$/;"	m	struct:path_data	typeref:typename:int[]
edge_classification	search.c	/^int edge_classification(search_data *data, int x, int y) {$/;"	f	typeref:typename:int
edgenode	graph.h	/^typedef struct edgenode {$/;"	s
edgenode	graph.h	/^} edgenode;$/;"	t	typeref:struct:edgenode
edges	graph.h	/^  edgenode *edges[MAXV];$/;"	m	struct:graph	typeref:typename:edgenode * []
end	queue.h	/^  int end;$/;"	m	struct:queue	typeref:typename:int
enqueue	queue.c	/^void enqueue(queue *q, int x) {$/;"	f	typeref:typename:void
entry_time	search.h	/^  int entry_time[MAXV];$/;"	m	struct:search_data	typeref:typename:int[]
exit_time	search.h	/^  int exit_time[MAXV];$/;"	m	struct:search_data	typeref:typename:int[]
g	plot.py	/^g = nx.DiGraph()$/;"	v
graph	graph.h	/^typedef struct graph {$/;"	s
graph	graph.h	/^} graph;$/;"	t	typeref:struct:graph
init_path_data	path.c	/^void init_path_data(graph *g, path_data *data) {$/;"	f	typeref:typename:void
init_queue	queue.c	/^void init_queue(queue *q) {$/;"	f	typeref:typename:void
init_queue_array	queue.c	/^void init_queue_array(queue *q, int a[], int n) {$/;"	f	typeref:typename:void
init_search_data	search.c	/^void init_search_data(graph *g, search_data *data) {$/;"	f	typeref:typename:void
init_stack	stack.c	/^void init_stack(stack *s) {$/;"	f	typeref:typename:void
init_stack_array	stack.c	/^void init_stack_array(stack *s, int a[], int n) {$/;"	f	typeref:typename:void
initialize_graph	graph.c	/^void initialize_graph(graph *g, bool directed) {$/;"	f	typeref:typename:void
insert_edge	graph.c	/^void insert_edge(graph *g, int x, int y, int w, bool directed) {$/;"	f	typeref:typename:void
intree	path.h	/^  bool intree[MAXV];$/;"	m	struct:path_data	typeref:typename:bool[]
is_empty_queue	queue.c	/^bool is_empty_queue(queue *q) {$/;"	f	typeref:typename:bool
is_empty_stack	stack.c	/^bool is_empty_stack(stack *s) {$/;"	f	typeref:typename:bool
main	main.c	/^int main(void) {$/;"	f	typeref:typename:int
main.out	Makefile	/^main.out: $(OBJ)$/;"	t
n	stack.h	/^  int n;$/;"	m	struct:stack	typeref:typename:int
nedges	graph.h	/^  int nedges;$/;"	m	struct:graph	typeref:typename:int
next	graph.h	/^  struct edgenode *next;$/;"	m	struct:edgenode	typeref:struct:edgenode *
nvertices	graph.h	/^  int nvertices;$/;"	m	struct:graph	typeref:typename:int
nx	plot.py	/^import networkx as nx$/;"	I
open_dict	plot.py	/^def open_dict(file):$/;"	f
open_weights	plot.py	/^def open_weights(file, d):$/;"	f
parent	path.h	/^  int parent[MAXV];$/;"	m	struct:path_data	typeref:typename:int[]
parent	search.h	/^  int parent[MAXV];$/;"	m	struct:search_data	typeref:typename:int[]
path_data	path.h	/^typedef struct path_data {$/;"	s
path_data	path.h	/^} path_data;$/;"	t	typeref:struct:path_data
plt	plot.py	/^import matplotlib.pyplot as plt$/;"	I
pop_stack	stack.c	/^int pop_stack(stack *s) {$/;"	f	typeref:typename:int
print_graph	graph.c	/^void print_graph(graph *g) {$/;"	f	typeref:typename:void
print_list	graph.c	/^void print_list(edgenode *e) {$/;"	f	typeref:typename:void
print_stack	stack.c	/^void print_stack(stack *s) {$/;"	f	typeref:typename:void
process_edge	main.c	/^void process_edge(int u, int v) {$/;"	f	typeref:typename:void
process_edge	search.h	/^  void (*process_edge)(int u, int v);$/;"	m	struct:search_data	typeref:typename:void (*)(int u,int v)
process_vertex_early	main.c	/^void process_vertex_early(int v) {$/;"	f	typeref:typename:void
process_vertex_early	search.h	/^  void (*process_vertex_early)(int v);$/;"	m	struct:search_data	typeref:typename:void (*)(int v)
process_vertex_late	main.c	/^void process_vertex_late(int v) {$/;"	f	typeref:typename:void
process_vertex_late	search.h	/^  void (*process_vertex_late)(int v);$/;"	m	struct:search_data	typeref:typename:void (*)(int v)
processed	search.h	/^  bool processed[MAXV];$/;"	m	struct:search_data	typeref:typename:bool[]
push_stack	stack.c	/^void push_stack(stack *s, int x) {$/;"	f	typeref:typename:void
queue	queue.h	/^typedef struct queue {$/;"	s
queue	queue.h	/^} queue;$/;"	t	typeref:struct:queue
read_graph	graph.c	/^void read_graph(graph *g, bool directed, bool weighted) {$/;"	f	typeref:typename:void
read_labels	main.c	/^void read_labels(FILE *fp, int labels[], int n) {$/;"	f	typeref:typename:void
s	main.c	/^stack s;$/;"	v	typeref:typename:stack
search_data	search.h	/^typedef struct search_data {$/;"	s
search_data	search.h	/^} search_data;$/;"	t	typeref:struct:search_data
stack	stack.h	/^typedef struct stack {$/;"	s
stack	stack.h	/^} stack;$/;"	t	typeref:struct:stack
start	queue.h	/^  int start;$/;"	m	struct:queue	typeref:typename:int
time	search.h	/^  int time;$/;"	m	struct:search_data	typeref:typename:int
topological_sort	main.c	/^void topological_sort(graph *g) {$/;"	f	typeref:typename:void
v	graph.h	/^  int v;$/;"	m	struct:edgenode	typeref:typename:int
w	plot.py	/^w = open_weights("w.txt", d)$/;"	v
weight	graph.h	/^  int weight;$/;"	m	struct:edgenode	typeref:typename:int
